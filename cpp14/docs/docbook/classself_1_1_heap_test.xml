<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classself_1_1_heap_test" xml:lang="en-US">
<title>self::HeapTest&lt; T &gt; Class Template Reference</title>
<indexterm><primary>self::HeapTest&lt; T &gt;</primary></indexterm>
<para>Inheritance diagram for self::HeapTest&lt; T &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classself_1_1_heap_test.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1aa6fb262180e89f6240a042fb8e39a8f5"/>template&lt;class Q  = T_main&gt; </para><para><emphasis role="strong">ENABLE_IF</emphasis> ((std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; char, false &gt;&gt;::value)||(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; char, true &gt;&gt;::value), void) initialize_dependent()</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1afbe6a34ad1d4b2dc84828462b87c0987"/>template&lt;class Q  = T_main&gt; </para><para><emphasis role="strong">ENABLE_IF</emphasis> ((std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; INTEGER, false &gt;&gt;::value)||(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; INTEGER, true &gt;&gt;::value), void) initialize_dependent()</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a8c76a4195a6a99692a1699472ba7bd7e"/>template&lt;class Q  = T_main&gt; </para><para><emphasis role="strong">ENABLE_IF</emphasis> ((std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; <link linkend="_classself_1_1_u_d_tf_t">UDTfT</link>, false, <link linkend="_structself_1_1_comparator_class">ComparatorClass</link> &gt;&gt;::value)||(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; <link linkend="_classself_1_1_u_d_tf_t">UDTfT</link>, true, <link linkend="_structself_1_1_inverse_comparator_class">InverseComparatorClass</link> &gt;&gt;::value), void) initialize_dependent()</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a10a1be07140f70e2ddbc0580f02561cb"/>template&lt;class Q  = T_main&gt; </para><para><emphasis role="strong">ENABLE_IF</emphasis> (!(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; INTEGER, false &gt;&gt;::value) &amp;&amp;!(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; INTEGER, true &gt;&gt;::value) &amp;&amp;!(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; char, false &gt;&gt;::value) &amp;&amp;!(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; char, true &gt;&gt;::value) &amp;&amp;!(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; <link linkend="_classself_1_1_u_d_tf_t">UDTfT</link>, false, <link linkend="_structself_1_1_comparator_class">ComparatorClass</link> &gt;&gt;::value) &amp;&amp;!(std::is_same&lt; Q, <link linkend="_classself_1_1_heap">Heap</link>&lt; <link linkend="_classself_1_1_u_d_tf_t">UDTfT</link>, true, <link linkend="_structself_1_1_inverse_comparator_class">InverseComparatorClass</link> &gt;&gt;::value), void) initialize_dependent()</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a875a2db29b0547e405561d7847af5089"/>void <emphasis role="strong">initialize_independent</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a122486521c201aaa3e07f267090e8a88"/>void <emphasis role="strong">SetUp</emphasis> () override</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a1513086c184635d6a79b21d1707e836c"/>void <emphasis role="strong">TearDown</emphasis> () override</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a3085179554664d16c7d20727886ebbb5"/>INTEGER <emphasis role="strong">size</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a7c354f287c952c08eebaf3deae75ab98"/>T_main <emphasis role="strong">hp</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a1895cbfa87e24a543d0be9f5b10ec671"/>T_base * <emphasis role="strong">arr</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1aa9f6c8b244c59740132e97fe5756a6e7"/>T_base <emphasis role="strong">top1</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a93d7239748f0ef0331615745e066f4dc"/>T_base <emphasis role="strong">top2</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a4a3a72239d303dd564921e80f59fac26"/>T_base <emphasis role="strong">objA</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_heap_test_1a955d44fed1b1952914ce3930f90e460d"/>T_base <emphasis role="strong">objB</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<para>
The documentation for this class was generated from the following file:</para>
D:/My Hosted Projects/Data Structure and Algorithms/cpp14/tests/src/tests Data Structure/tests Heap.cpp</section>
