<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classself_1_1_dynamic_array_1_1iterator" xml:lang="en-US">
<title>self::DynamicArray&lt; T &gt;::iterator Class Reference</title>
<indexterm><primary>self::DynamicArray&lt; T &gt;::iterator</primary></indexterm>
<para>

<para>Dynamic Array iterator class. </para>
 
</para>
<para>
<computeroutput>#include &lt;DynamicArray.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classself_1_1_dynamic_array_1_1iterator_1a0e344ee0c54dba524c04c96b7b136ca1">iterator</link> (T *arr__, T *end_=nullptr)</para>

<para>Array and End Pointer. </para>
</listitem>
            <listitem><para><link linkend="_classself_1_1_dynamic_array_1_1iterator">iterator</link> <link linkend="_classself_1_1_dynamic_array_1_1iterator_1aff9f15419c7b47282208609daae5b6e4">operator++</link> ()</para>

<para>Iterator increment overload defination. </para>
</listitem>
            <listitem><para>bool <link linkend="_classself_1_1_dynamic_array_1_1iterator_1ac88cfabba59251f4081fd644047dfced">operator!=</link> (const <link linkend="_classself_1_1_dynamic_array_1_1iterator">iterator</link> &amp;other) const</para>

<para>Inequality != method overload. </para>
</listitem>
            <listitem><para>const T <link linkend="_classself_1_1_dynamic_array_1_1iterator_1a632a27cbc04f12104c66dd5b43c2d64f">operator*</link> () const</para>

<para>Element access overload method. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;
class self::DynamicArray&lt; T &gt;::iterator</title></simplesect>


<para>Dynamic Array iterator class. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classself_1_1_dynamic_array_1_1iterator_1a0e344ee0c54dba524c04c96b7b136ca1"/>    <section>
    <title>iterator()</title>
<indexterm><primary>iterator</primary><secondary>self::DynamicArray&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::DynamicArray&lt; T &gt;::iterator</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classself_1_1_dynamic_array">self::DynamicArray</link>&lt; T &gt;::iterator::iterator (T * arr__, T * end_ = <computeroutput>nullptr</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Array and End Pointer. </para>
</para>

<para>Iterator Counstructor 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>arr__</entry>
                                <entry>
<para>Array Pointer </para>
</entry>
                            </row>
                            <row>
                                <entry>end_</entry>
                                <entry>
<para>Iterator to end </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classself_1_1_dynamic_array_1_1iterator_1ac88cfabba59251f4081fd644047dfced"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>self::DynamicArray&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::DynamicArray&lt; T &gt;::iterator</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classself_1_1_dynamic_array">self::DynamicArray</link>&lt; T &gt;::iterator::operator!= (const <link linkend="_classself_1_1_dynamic_array_1_1iterator">iterator</link> &amp; other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inequality != method overload. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>Other iterator to check inequality against </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool True if end of iteration is reached </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>exception</entry>
                                <entry>
<para>Iterator Invalidation exception </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classself_1_1_dynamic_array_1_1iterator_1a632a27cbc04f12104c66dd5b43c2d64f"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>self::DynamicArray&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::DynamicArray&lt; T &gt;::iterator</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T <link linkend="_classself_1_1_dynamic_array">self::DynamicArray</link>&lt; T &gt;::iterator::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Element access overload method. </para>
</para>

<para><formalpara><title>Returns</title>

<para>T Data at top of stack or queue </para>
</formalpara>
</para>
    </section><anchor xml:id="_classself_1_1_dynamic_array_1_1iterator_1aff9f15419c7b47282208609daae5b6e4"/>    <section>
    <title>operator++()</title>
<indexterm><primary>operator++</primary><secondary>self::DynamicArray&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::DynamicArray&lt; T &gt;::iterator</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classself_1_1_dynamic_array_1_1iterator">iterator</link> <link linkend="_classself_1_1_dynamic_array">self::DynamicArray</link>&lt; T &gt;::iterator::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator increment overload defination. </para>
</para>

<para><formalpara><title>Returns</title>

<para>iterator Incremented iterator </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
D:/My Hosted Projects/Data Structure and Algorithms/cpp14/Data-Structure/Dynamic_Array/include/DynamicArray/DynamicArray.hpp</section>
</section>
