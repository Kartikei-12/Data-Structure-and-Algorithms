<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classself_1_1_binary_tree_1_1iterator" xml:lang="en-US">
<title>self::BinaryTree&lt; T &gt;::iterator Class Reference</title>
<indexterm><primary>self::BinaryTree&lt; T &gt;::iterator</primary></indexterm>
<para>

<para>Pure virtual function overload operator =. </para>
 
</para>
<para>
<computeroutput>#include &lt;BinaryTree.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classself_1_1_binary_tree_1_1iterator_1ad3ec2e2c362f14a6f75ef8d93e630f1d">iterator</link> (INTEGER nodeCount_, <link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr=nullptr, std::string itype_=&quot;END&quot;)</para>

<para><link linkend="_classself_1_1_queue">Queue</link>. </para>
</listitem>
            <listitem><para><link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link> <link linkend="_classself_1_1_binary_tree_1_1iterator_1ab79fac8e01d8ef7f7e409d689be7fcfb">operator++</link> ()</para>

<para>Iterator increment overload defination. </para>
</listitem>
            <listitem><para>bool <link linkend="_classself_1_1_binary_tree_1_1iterator_1aaba5701a674fb700defa9330d17eb34d">isEnd</link> ()</para>

<para>Function to check for end of iteratation. </para>
</listitem>
            <listitem><para>bool <link linkend="_classself_1_1_binary_tree_1_1iterator_1a4fb16a339b6bbda6c8a7c8c38b2adc2f">operator!=</link> (const <link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link> &amp;other)</para>

<para>Inequality != method overload. </para>
</listitem>
            <listitem><para>const T <link linkend="_classself_1_1_binary_tree_1_1iterator_1a56238d361fa036a70bb6d1bbca805baa">operator*</link> ()</para>

<para>Element access overload method. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;
class self::BinaryTree&lt; T &gt;::iterator</title></simplesect>


<para>Pure virtual function overload operator =. </para>



<para>Binary Tree iterator class. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classself_1_1_binary_tree_1_1iterator_1ad3ec2e2c362f14a6f75ef8d93e630f1d"/>    <section>
    <title>iterator()</title>
<indexterm><primary>iterator</primary><secondary>self::BinaryTree&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;::iterator</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::iterator::iterator (INTEGER nodeCount_, <link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr = <computeroutput>nullptr</computeroutput>
, std::string itype_ = <computeroutput>&quot;END&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para><link linkend="_classself_1_1_queue">Queue</link>. </para>
</para>

<para>Iterator class counstructor function. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>nodeCount_</entry>
                                <entry>
<para>Initial node count of the tree </para>
</entry>
                            </row>
                            <row>
                                <entry>curr</entry>
                                <entry>
<para>Root node </para>
</entry>
                            </row>
                            <row>
                                <entry>itype_</entry>
                                <entry>
<para>Type of iterator </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>exception</entry>
                                <entry>
<para>When iterator type is unknown </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classself_1_1_binary_tree_1_1iterator_1aaba5701a674fb700defa9330d17eb34d"/>    <section>
    <title>isEnd()</title>
<indexterm><primary>isEnd</primary><secondary>self::BinaryTree&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;::iterator</primary><secondary>isEnd</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::iterator::isEnd ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Function to check for end of iteratation. </para>
</para>

<para><formalpara><title>Returns</title>

<para>bool True if iteration end </para>
</formalpara>
</para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1_1iterator_1a4fb16a339b6bbda6c8a7c8c38b2adc2f"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>self::BinaryTree&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;::iterator</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::iterator::operator!= (const <link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inequality != method overload. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>Other iterator to check inequality against </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool True if end of iteration is reached </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>exception</entry>
                                <entry>
<para>Iterator Invalidation exception </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1_1iterator_1a56238d361fa036a70bb6d1bbca805baa"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>self::BinaryTree&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;::iterator</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::iterator::operator* ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Element access overload method. </para>
</para>

<para><formalpara><title>Returns</title>

<para>T Data at top of stack or queue </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>exception</entry>
                                <entry>
<para>Accessing End iterator data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1_1iterator_1ab79fac8e01d8ef7f7e409d689be7fcfb"/>    <section>
    <title>operator++()</title>
<indexterm><primary>operator++</primary><secondary>self::BinaryTree&lt; T &gt;::iterator</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;::iterator</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link> <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::iterator::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator increment overload defination. </para>
</para>

<para><formalpara><title>Returns</title>

<para>iterator Incremented iterator </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
D:/My Hosted Projects/Data Structure and Algorithms/cpp14/Data-Structure/Binary_Tree/include/BinaryTree/BinaryTree.hpp</section>
</section>
