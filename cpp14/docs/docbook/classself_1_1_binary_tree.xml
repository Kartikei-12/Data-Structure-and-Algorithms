<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classself_1_1_binary_tree" xml:lang="en-US">
<title>self::BinaryTree&lt; T &gt; Class Template Reference</title>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary></indexterm>
<para>

<para>Binary Tree Template Class. </para>
 
</para>
<para>
<computeroutput>#include &lt;BinaryTree.hpp&gt;</computeroutput>
</para>
<para>Inheritance diagram for self::BinaryTree&lt; T &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classself_1_1_binary_tree.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link></para>

<para>Pure virtual function overload operator =. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a21be73ca8f4e178d4af8f8d88c081897"/><link linkend="_classself_1_1_binary_tree_1a21be73ca8f4e178d4af8f8d88c081897">~BinaryTree</link> ()</para>

<para>Default Counstructor. </para>
</listitem>
            <listitem><para>bool <link linkend="_classself_1_1_binary_tree_1ad622d9a137fe16755567a93b1d56183c">isEmpty</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>INTEGER <link linkend="_classself_1_1_binary_tree_1a9345785163936b46eb59321bafa32dc3">size</link> ()</para>

<para>Expose size of binary tree. </para>
</listitem>
            <listitem><para>bool <link linkend="_classself_1_1_binary_tree_1a5bca6699ec6a7170bcc3248bdb49d9d1">contains</link> (T element)</para>

<para>Check for presence of given element. </para>
</listitem>
            <listitem><para>INTEGER <link linkend="_classself_1_1_binary_tree_1ad1382d60dc79ded7ac64f616facded44">height</link> (<link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr=nullptr)</para>

<para>Calculate height of the tree. </para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a7550c34cbc31b0ffdf7b197678b32b80"/>virtual void <emphasis role="strong">add</emphasis> (T element)=0</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a333f578e34889188008184c985e30d2a"/>virtual bool <link linkend="_classself_1_1_binary_tree_1a333f578e34889188008184c985e30d2a">remove</link> (T element)=0</para>

<para>Pure virtual function add. </para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a145d0f1c60eb743ae219fa8ff9c38c7d"/>virtual void <link linkend="_classself_1_1_binary_tree_1a145d0f1c60eb743ae219fa8ff9c38c7d">operator=</link> (std::initializer_list&lt; T &gt; list)=0</para>

<para>Pure virtual function remove. </para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a8a7e26ea1834aa6230ab8c23087e6c78"/><link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link> <emphasis role="strong">begin</emphasis> (std::string itype)</para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a41844c404ba8464cbe62ac73e8937d49"/><link linkend="_classself_1_1_binary_tree_1_1iterator">iterator</link> <link linkend="_classself_1_1_binary_tree_1a41844c404ba8464cbe62ac73e8937d49">end</link> ()</para>

<para>Begin Iterator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Types    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a398f1fdcd36893fc55504b4ccaa26d81"/>typedef <link linkend="_classself_1_1_node_two_child">NodeTwoChild</link>&lt; T &gt; * <emphasis role="strong">TreeNodePtr</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual <link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> <link linkend="_classself_1_1_binary_tree_1aaa7bc9416dee5aec0e12fa4fa274a794">find</link> (T &amp;element, <link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr)</para>

<para>Node Pointer to root. </para>
</listitem>
            <listitem><para>void <link linkend="_classself_1_1_binary_tree_1a0fee2854a84ce094bf45c8e20dc0a8d1">_delete</link> (<link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr)</para>

<para>Recusive delete function. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1a836528137803f4907af8946753029f27"/>INTEGER <emphasis role="strong">count</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_classself_1_1_binary_tree_1aec25edbb47d3af1444756b1c38b227dc"/><link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> <link linkend="_classself_1_1_binary_tree_1aec25edbb47d3af1444756b1c38b227dc">root</link></para>

<para>count Number of nodes in binary tree </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;
class self::BinaryTree&lt; T &gt;</title></simplesect>


<para>Binary Tree Template Class. </para>



<para>
                <formalpara>
                    <title>
Template Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>T</entry>
                                <entry>
<para>Type used for Binary Tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classself_1_1_binary_tree_1a0fee2854a84ce094bf45c8e20dc0a8d1"/>    <section>
    <title>_delete()</title>
<indexterm><primary>_delete</primary><secondary>self::BinaryTree&lt; T &gt;</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary><secondary>_delete</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::_delete (<link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Recusive delete function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>curr</entry>
                                <entry>
<para>Current Node to delete </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1a5bca6699ec6a7170bcc3248bdb49d9d1"/>    <section>
    <title>contains()</title>
<indexterm><primary>contains</primary><secondary>self::BinaryTree&lt; T &gt;</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::contains (T element)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Check for presence of given element. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>element</entry>
                                <entry>
<para>Element to look for </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool True if element present </para>
</formalpara>
</para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1aaa7bc9416dee5aec0e12fa4fa274a794"/>    <section>
    <title>find()</title>
<indexterm><primary>find</primary><secondary>self::BinaryTree&lt; T &gt;</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>virtual <link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::find (T &amp; element, <link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Node Pointer to root. </para>
</para>

<para>Default find member function. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>element</entry>
                                <entry>
<para>Element to look for </para>
</entry>
                            </row>
                            <row>
                                <entry>curr</entry>
                                <entry>
<para>Current node to search </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Node data found at </para>
</formalpara>
</para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1ad1382d60dc79ded7ac64f616facded44"/>    <section>
    <title>height()</title>
<indexterm><primary>height</primary><secondary>self::BinaryTree&lt; T &gt;</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary><secondary>height</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>INTEGER <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::height (<link linkend="_classself_1_1_node_two_child">TreeNodePtr</link> curr = <computeroutput>nullptr</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Calculate height of the tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>curr</entry>
                                <entry>
<para>Node to start from </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>int Height of tree </para>
</formalpara>
</para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1ad622d9a137fe16755567a93b1d56183c"/>    <section>
    <title>isEmpty()</title>
<indexterm><primary>isEmpty</primary><secondary>self::BinaryTree&lt; T &gt;</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary><secondary>isEmpty</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::isEmpty ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Checks for emptiness of binary tree. <formalpara><title>Returns</title>

<para>bool True if tree empty, fals otherwise </para>
</formalpara>
</para>
    </section><anchor xml:id="_classself_1_1_binary_tree_1a9345785163936b46eb59321bafa32dc3"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>self::BinaryTree&lt; T &gt;</secondary></indexterm>
<indexterm><primary>self::BinaryTree&lt; T &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>INTEGER <link linkend="_classself_1_1_binary_tree">self::BinaryTree</link>&lt; T &gt;::size ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Expose size of binary tree. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int Number of nodes in tree </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
D:/My Hosted Projects/Data Structure and Algorithms/cpp14/Data-Structure/Binary_Tree/include/BinaryTree/BinaryTree.hpp</section>
</section>
